#Adapted from Stanford CS231n Course
import numpy as np

correct_outs = {
    "CNN_forward": 
    np.array([[[[-0.14057416, -0.15756717],
            [-0.21450865, -0.23547663]],
            [[ 0.15712551,  0.16398233],
            [ 0.17859036,  0.18147221]],
            [[ 0.45482517,  0.48553184],
            [ 0.57168936,  0.59842105]]],
        [[[-0.884689  , -0.92553184],
            [-1.05402282, -1.09884063]],
            [[ 0.55780272,  0.54080972],
            [ 0.48386824,  0.46290026]],
            [[ 2.00029444,  2.00715127],
            [ 2.02175929,  2.02464115]]]]),
    "maxpool_forward":
    np.array([[[[-0.17818182, -0.17545455, -0.17272727],
            [-0.15909091, -0.15636364, -0.15363636],
            [-0.14      , -0.13727273, -0.13454545]],
            [[-0.11136364, -0.10863636, -0.10590909],
            [-0.09227273, -0.08954545, -0.08681818],
            [-0.07318182, -0.07045455, -0.06772727]],
            [[-0.04454545, -0.04181818, -0.03909091],
            [-0.02545455, -0.02272727, -0.02      ],
            [-0.00636364, -0.00363636, -0.00090909]]],
        [[[ 0.02227273,  0.025     ,  0.02772727],
            [ 0.04136364,  0.04409091,  0.04681818],
            [ 0.06045455,  0.06318182,  0.06590909]],
            [[ 0.08909091,  0.09181818,  0.09454545],
            [ 0.10818182,  0.11090909,  0.11363636],
            [ 0.12727273,  0.13      ,  0.13272727]],
            [[ 0.15590909,  0.15863636,  0.16136364],
            [ 0.175     ,  0.17772727,  0.18045455],
            [ 0.19409091,  0.19681818,  0.19954545]]],
        [[[ 0.22272727,  0.22545455,  0.22818182],
            [ 0.24181818,  0.24454545,  0.24727273],
            [ 0.26090909,  0.26363636,  0.26636364]],
            [[ 0.28954545,  0.29227273,  0.295     ],
            [ 0.30863636,  0.31136364,  0.31409091],
            [ 0.32772727,  0.33045455,  0.33318182]],
            [[ 0.35636364,  0.35909091,  0.36181818],
            [ 0.37545455,  0.37818182,  0.38090909],
            [ 0.39454545,  0.39727273,  0.4       ]]]]),
    "averagepool_forward":
    np.array([[[[-0.18909091, -0.18636364, -0.18363636],
            [-0.17      , -0.16727273, -0.16454545],
            [-0.15090909, -0.14818182, -0.14545455]],
            [[-0.12227273, -0.11954545, -0.11681818],
            [-0.10318182, -0.10045455, -0.09772727],
            [-0.08409091, -0.08136364, -0.07863636]],
            [[-0.05545455, -0.05272727, -0.05      ],
            [-0.03636364, -0.03363636, -0.03090909],
            [-0.01727273, -0.01454545, -0.01181818]]],
        [[[ 0.01136364,  0.01409091,  0.01681818],
            [ 0.03045455,  0.03318182,  0.03590909],
            [ 0.04954545,  0.05227273,  0.055     ]],
            [[ 0.07818182,  0.08090909,  0.08363636],
            [ 0.09727273,  0.1       ,  0.10272727],
            [ 0.11636364,  0.11909091,  0.12181818]],
            [[ 0.145     ,  0.14772727,  0.15045455],
            [ 0.16409091,  0.16681818,  0.16954545],
            [ 0.18318182,  0.18590909,  0.18863636]]],
        [[[ 0.21181818,  0.21454545,  0.21727273],
            [ 0.23090909,  0.23363636,  0.23636364],
            [ 0.25      ,  0.25272727,  0.25545455]],
            [[ 0.27863636,  0.28136364,  0.28409091],
            [ 0.29772727,  0.30045455,  0.30318182],
            [ 0.31681818,  0.31954545,  0.32227273]],
            [[ 0.34545455,  0.34818182,  0.35090909],
            [ 0.36454545,  0.36727273,  0.37      ],
            [ 0.38363636,  0.38636364,  0.38909091]]]]),
}



def rel_error(x, y):
    if type(y) == str:
        y = correct_outs[y]
    return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))


def grad_check(f, x, df=None, h=1e-5):
    grad = np.zeros(x.shape)
    it = np.nditer(x, flags=['multi_index'])
    while not it.finished:
        ix = it.multi_index

        oldval = x[ix]
        x[ix] = oldval + h
        plus = f(x).copy()
        x[ix] = oldval - h
        minus = f(x).copy()
        x[ix] = oldval
        if df is not None:
            grad[ix] = np.sum((plus - minus) * df) / (2 * h)
        else:
            grad[ix] = (plus - minus) / (2 * h)
        it.iternext()
    return grad

